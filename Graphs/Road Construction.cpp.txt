#include <bits/stdc++.h>
#include <bits/extc++.h>//
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
using namespace std;
using ll = long long ;
#define pb            push_back
#define ld            long double
#define sz            size()
#define foo(i,a,b)    for (ll i=a;i<b;i++)
#define pll           pair<ll,ll>
#define ed            "\n"
#define ct            cout
#define m_p           make_pair
#define vi            vector<ll>
#define vpll           vector<pll>
#define ff            first
#define ss            second
#define mod           998244353
#define int long long
 
// for fast hashing
const int RANDOM = chrono::high_resolution_clock::now().time_since_epoch().count();
struct chash { // To use most bits rather than just the lowest ones:
	const uint64_t C = ll(4e18 * acos(0)) | 71; // large odd number
	ll operator()(ll x) const { return __builtin_bswap64((x^RANDOM)*C); }
};
template<class K,class V> using ht = gp_hash_table<K,V,chash>;
//__gnu_pbds::gp_hash_table<ll, int, chash> ht({},{},{},{}, {1 << 16});
 
//oset<int>s:s.find_by_order(k):Kth element in "s",s.order_of_key(k):Number of item strictly lessthan k
template<class T> using oset =tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update> ;
const int N = 1e5 +2;
int rnk[N],par[N];
int n,q,maxa = 0;
int find_set(int x){
    if(par[x]==x){
        return x;
    }
    return par[x] = find_set(par[x]);
}
void make_set(){
    foo(i,0,n+1) par[i] = i, rnk[i] =1;
}
void union_of_set(int x,int y){
    if(find_set(x)==find_set(y)){
        return;
    }
    if(rnk[find_set(x)]>rnk[find_set(y)]){
        rnk[find_set(x)] += rnk[find_set(y)];
        par[find_set(y)] = find_set(x);
    }
    else {
         rnk[find_set(y)] += rnk[find_set(x)];
         par[find_set(x)] = find_set(y);
    }
}
void solve(){
    int cnt = 0;
    cin>>n>>q;
    make_set();
    while(q--){
        int i,j; cin>>i>>j;
        if(find_set(i)!=find_set(j)) cnt++;
        union_of_set(i,j);
        int sizee = rnk[find_set(i)];
        maxa = max(maxa,sizee);
        ct<<n-cnt<<" "<<maxa<<ed;
    }
 
}
 
int32_t main()
{
  ios_base::sync_with_stdio(false);
  cin.tie(0);cout.tie(0);
  /*#ifndef ONLINE_JUDGE
    freopen("input.txt","r",stdin);
    freopen("output.txt","w",stdout);
  #endif
*/
 
  int t =1; //cin>>t;
 
  while(t--){
 
    solve();
  }
  return 0;
}